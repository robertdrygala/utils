package com.robomonix.tools;

import org.junit.Assert;
import org.junit.Test;

public class ByteToHexConverterTest {

    @Test
    public void testConvertByteToString() {
        String input = "this is my string \n with some new line and \r carriage return";
        String output = ByteToHexConverter.convertSpecialCharactersToAsciiRepresentationString(input.getBytes(), "|");
        Assert.assertEquals(output, "0x74|0x68|0x69|0x73|0x20|0x69|0x73|0x20|0x6D|0x79|0x20|0x73|0x74|0x72|0x69|0x6E|0x67|0x20|0x0A|0x20|0x77|0x69|0x74|0x68|0x20|0x73|0x6F|0x6D|0x65|0x20|0x6E|0x65|0x77|0x20|0x6C|0x69|0x6E|0x65|0x20|0x61|0x6E|0x64|0x20|0x0D|0x20|0x63|0x61|0x72|0x72|0x69|0x61|0x67|0x65|0x20|0x72|0x65|0x74|0x75|0x72|0x6E|");
    }

    @Test
    public void testConvertByteToByte() {
        String input = "this is my string \n with some new line and \r carriage return";
        byte[] output = ByteToHexConverter.convertSpecialCharactersToAsciiRepresentationByte(input.getBytes(), "|");
        Assert.assertEquals(new String(output), "0x74|0x68|0x69|0x73|0x20|0x69|0x73|0x20|0x6D|0x79|0x20|0x73|0x74|0x72|0x69|0x6E|0x67|0x20|0x0A|0x20|0x77|0x69|0x74|0x68|0x20|0x73|0x6F|0x6D|0x65|0x20|0x6E|0x65|0x77|0x20|0x6C|0x69|0x6E|0x65|0x20|0x61|0x6E|0x64|0x20|0x0D|0x20|0x63|0x61|0x72|0x72|0x69|0x61|0x67|0x65|0x20|0x72|0x65|0x74|0x75|0x72|0x6E|");
    }


    @Test
    public void testConvertByteToStringWithEmptyDelimiter() {
        String input = "this is my string \n with some new line and \r carriage return";
        byte[] output = ByteToHexConverter.convertSpecialCharactersToAsciiRepresentationByte(input.getBytes(), null);
        Assert.assertEquals(new String(output), "0x74|0x68|0x69|0x73|0x20|0x69|0x73|0x20|0x6D|0x79|0x20|0x73|0x74|0x72|0x69|0x6E|0x67|0x20|0x0A|0x20|0x77|0x69|0x74|0x68|0x20|0x73|0x6F|0x6D|0x65|0x20|0x6E|0x65|0x77|0x20|0x6C|0x69|0x6E|0x65|0x20|0x61|0x6E|0x64|0x20|0x0D|0x20|0x63|0x61|0x72|0x72|0x69|0x61|0x67|0x65|0x20|0x72|0x65|0x74|0x75|0x72|0x6E|");

        output = ByteToHexConverter.convertSpecialCharactersToAsciiRepresentationByte(input.getBytes(), "");
        Assert.assertEquals(new String(output), "0x74|0x68|0x69|0x73|0x20|0x69|0x73|0x20|0x6D|0x79|0x20|0x73|0x74|0x72|0x69|0x6E|0x67|0x20|0x0A|0x20|0x77|0x69|0x74|0x68|0x20|0x73|0x6F|0x6D|0x65|0x20|0x6E|0x65|0x77|0x20|0x6C|0x69|0x6E|0x65|0x20|0x61|0x6E|0x64|0x20|0x0D|0x20|0x63|0x61|0x72|0x72|0x69|0x61|0x67|0x65|0x20|0x72|0x65|0x74|0x75|0x72|0x6E|");

        String sOutput = ByteToHexConverter.convertSpecialCharactersToAsciiRepresentationString(input.getBytes(), "");
        Assert.assertEquals(new String(sOutput), "0x74|0x68|0x69|0x73|0x20|0x69|0x73|0x20|0x6D|0x79|0x20|0x73|0x74|0x72|0x69|0x6E|0x67|0x20|0x0A|0x20|0x77|0x69|0x74|0x68|0x20|0x73|0x6F|0x6D|0x65|0x20|0x6E|0x65|0x77|0x20|0x6C|0x69|0x6E|0x65|0x20|0x61|0x6E|0x64|0x20|0x0D|0x20|0x63|0x61|0x72|0x72|0x69|0x61|0x67|0x65|0x20|0x72|0x65|0x74|0x75|0x72|0x6E|");

        sOutput = ByteToHexConverter.convertSpecialCharactersToAsciiRepresentationString(input.getBytes(), null);
        Assert.assertEquals(new String(sOutput), "0x74|0x68|0x69|0x73|0x20|0x69|0x73|0x20|0x6D|0x79|0x20|0x73|0x74|0x72|0x69|0x6E|0x67|0x20|0x0A|0x20|0x77|0x69|0x74|0x68|0x20|0x73|0x6F|0x6D|0x65|0x20|0x6E|0x65|0x77|0x20|0x6C|0x69|0x6E|0x65|0x20|0x61|0x6E|0x64|0x20|0x0D|0x20|0x63|0x61|0x72|0x72|0x69|0x61|0x67|0x65|0x20|0x72|0x65|0x74|0x75|0x72|0x6E|");
    }

    @Test
    public void testConvertSingleByte(){
        String output = ByteToHexConverter.convertByteToString(new Byte("127"));
        Assert.assertEquals(output, "0x7F");

        output = ByteToHexConverter.convertByteToString(new Byte("-127"));
        Assert.assertEquals(output, "0x81");
    }
}
